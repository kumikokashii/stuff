================================================
React Crash Course
https://www.youtube.com/watch?v=Ke90Tje7VS0
================================================

DOM = Document Object Model
- DOM elements are window, document, table, etc.

React is a View library, not a framework like Angular. It reacts to state change between Virtual DOM and Real DOM. Each component is a class with state and render method.

Browser's React Developer Tools extention: Install and its a new tab in Inspect (Option + Command + i). When you see "==$x", go to the Console tab and use it to view/manipulate. For ex, if $x is a button, $x.click, etc.

------------------------------------------------
Setup
------------------------------------------------

Install Node.js: brew install
Install React: sudo npm i -g create-react-app@1.5.2

Code editor (Visual Studio Code) w/ extentions
- Simple React Snippets
- Prettier, code reformatter

When I cloned the Gihub repo, it didn't work until in each app dir, "npm install" was run.

------------------------------------------------
First App
------------------------------------------------

Create a new app: create-react-app app-name (app-name can be anything)

Compile and open it up in browser: npm start (from the new directory). go to localhost:3000 to see it

Each component's render method returns JSX
- JSX = JavaScriptXML, looks like <h1>Hello<h1>
- Babel compiles JSX via React. It does "React.createElement(...)"

------------------------------------------------
More 1: Good Stuff!
------------------------------------------------

Bootstrap:
- "Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation and other interface components."
- Install bootstrap: npm i bootstrap@4.1.1
- Add to index.js: import 'bootstrap/dist/css/bootstrap.css';

In src, create a directory called components. Make a file per component.
- Name componentName.jsx (jsx = JavaScriptXML. instead of just .js). Use camelCase.
- Import that class in index.js: import Counter from './components/counter';
- Use it as <Counter />
- When you "export default ComponentName", you don't need {} in import. Just do "import ComponentName from './components/componentName"

Render method needs 1 top-level element. If more, confused unless React.Fragment is used.

State to store data.
state = {
  count: 0,
  address: {
    street: xyz
  }
}
... and use it anywhere like: <span>{this.state.count}</span>,
... or formatCount() {
	     return this.state.count === 0 ? 'Zero' : this.state.count;
       }

https://picsum.photos/ to get random images!

In HTML tags, CSS class is className (b/c class is a reserved JS name).

------------------------------------------------
More 2: Better Stuff!
------------------------------------------------
React warns if a list's elements don't have individual keys. This is because React wants to know how to get to each element.

In JavaScript, condition of (true && "Hi") is "Hi". It returns the LAST true/true-y element's value. (true && "Hi" && 1) is 1.

For JavaScritpt event handing, only specify the NAME of the method. Ex: onClick={this.handleIncrement}. No need for ().

React is strange when it comes to the instance variable "this". It is not always the instance. Read how it works here:
https://medium.com/@nikolalsvk/loosing-bind-this-in-react-8637ebf372cf

Don't update the state directly. React doesn't notice the change. Use setState.

Props (properties) are read-only and can not change. They only come from that component's birthplace (where it is placed). State is what React reacts to, and private to self. Read more here:
https://blog.cloudboost.io/props-vs-state-in-react-js-9c186dcf39b8

Initialize an instance like this, and this new component's proprs has value and selected: <ComponentName value={0} selected={true} />. Use thse to initialize the instance's state. 

props.children is the inbetween elements.

------------------------------------------------
More 3: Even Better Stuff!
------------------------------------------------

props can have a function. For example, to remove an element from a list where each element is a component of a whole, 
  let <button onClick={this.props.onDelete}>...
  ... whole has an event-handler like: handleDelete = () => {delete this element by id}; and add this to the initialization of the child component: onDelete={this.handleDelete}

 Above is to have the single source of truth. The class that creates an instance of another class needs to manage the modifications of that instance.

[...array] and {...dict} is for deep copy. Ex: newKiwi = [...newKiwi]

------------------------------------------------
More 3: Sleepy Stuff zzz
------------------------------------------------

Stateless Functional Component:
Instead of a class, if the class has nothing other than render, then you can make it into a func that returns the same thing: const NavBar = props => {return (the elements);}. Change this.props to props.

Destructing Arguments:
At the beginning of render method, specify what prop fields to use, and avoid writing this.props.fieldName.
const {counters, onReset} = this.props;
... onClick={onReset} instead of onClick={this.propr.onReset}



